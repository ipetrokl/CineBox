// <auto-generated />
using System;
using CineBox.Services.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CineBox.Services.Migrations
{
    [DbContext(typeof(CineBoxContext))]
    [Migration("20240723124833_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CineBox.Services.Database.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__Actor__3213E83F2E81C85E");

                    b.ToTable("Actor", (string)null);
                });

            modelBuilder.Entity("CineBox.Services.Database.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<int>("PromotionId")
                        .HasColumnType("int")
                        .HasColumnName("promotion_Id");

                    b.Property<int>("ScreeningId")
                        .HasColumnType("int")
                        .HasColumnName("screening_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__Booking__3213E83F4DE83FAA");

                    b.HasIndex("PromotionId");

                    b.HasIndex("ScreeningId");

                    b.HasIndex("UserId");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("CineBox.Services.Database.BookingSeat", b =>
                {
                    b.Property<int>("BookingSeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("bookingSeatId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingSeatId"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("booking_id");

                    b.Property<int>("SeatId")
                        .HasColumnType("int")
                        .HasColumnName("seat_id");

                    b.HasKey("BookingSeatId")
                        .HasName("PK__BookingS__0F3B47D633C275B0");

                    b.HasIndex("BookingId");

                    b.HasIndex("SeatId");

                    b.ToTable("BookingSeat", (string)null);
                });

            modelBuilder.Entity("CineBox.Services.Database.Cinema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__Cinema__3213E83F23CFAD71");

                    b.ToTable("Cinema", (string)null);
                });

            modelBuilder.Entity("CineBox.Services.Database.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__Genre__3213E83F38AFBD04");

                    b.ToTable("Genre", (string)null);
                });

            modelBuilder.Entity("CineBox.Services.Database.Hall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CinemaId")
                        .HasColumnType("int")
                        .HasColumnName("cinema_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__Hall__3213E83FD9AF1396");

                    b.HasIndex("CinemaId");

                    b.ToTable("Hall", (string)null);
                });

            modelBuilder.Entity("CineBox.Services.Database.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("director");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("genre_id");

                    b.Property<DateTime>("PerformedFrom")
                        .HasColumnType("date")
                        .HasColumnName("performed_from");

                    b.Property<DateTime>("PerformedTo")
                        .HasColumnType("date")
                        .HasColumnName("performed_to");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("picture");

                    b.Property<byte[]>("PictureThumb")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("pictureThumb");

                    b.Property<string>("StateMachine")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("stateMachine");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("PK__Movie__3213E83F2BD5909A");

                    b.HasIndex("GenreId");

                    b.ToTable("Movie", (string)null);
                });

            modelBuilder.Entity("CineBox.Services.Database.MovieActor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActorId")
                        .HasColumnType("int")
                        .HasColumnName("actor_id");

                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("movie_id");

                    b.HasKey("Id")
                        .HasName("PK__MovieAct__3213E83F842B29CF");

                    b.HasIndex("ActorId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieActor", (string)null);
                });

            modelBuilder.Entity("CineBox.Services.Database.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CinemaId")
                        .HasColumnType("int")
                        .HasColumnName("cinema_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__News__3213E83F8B80E9AE");

                    b.HasIndex("CinemaId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("CineBox.Services.Database.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("amount");

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("booking_id");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("payment_status");

                    b.HasKey("Id")
                        .HasName("PK__Payment__3213E83F05BAE6AD");

                    b.HasIndex("BookingId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("CineBox.Services.Database.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("code");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("discount");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("date")
                        .HasColumnName("expiration_date");

                    b.HasKey("Id")
                        .HasName("PK__Promotio__3213E83FC04BB357");

                    b.ToTable("Promotion", (string)null);
                });

            modelBuilder.Entity("CineBox.Services.Database.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("comment");

                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("movie_id");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__Review__3213E83FD26CF094");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("CineBox.Services.Database.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__Roles__3213E83F76DBADCD");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CineBox.Services.Database.Screening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("category");

                    b.Property<int>("HallId")
                        .HasColumnType("int")
                        .HasColumnName("hall_id");

                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("movie_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<DateTime>("ScreeningTime")
                        .HasColumnType("datetime")
                        .HasColumnName("screening_time");

                    b.HasKey("Id")
                        .HasName("PK__Screenin__3213E83F341DB2BE");

                    b.HasIndex("HallId");

                    b.HasIndex("MovieId");

                    b.ToTable("Screening", (string)null);
                });

            modelBuilder.Entity("CineBox.Services.Database.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("category");

                    b.Property<int>("HallId")
                        .HasColumnType("int")
                        .HasColumnName("hall_id");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("int")
                        .HasColumnName("seat_number");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK__Seat__3213E83F0DCCBA47");

                    b.HasIndex("HallId");

                    b.ToTable("Seat", (string)null);
                });

            modelBuilder.Entity("CineBox.Services.Database.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingSeatId")
                        .HasColumnType("int")
                        .HasColumnName("booking_seat_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<string>("QrCode")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("qr_code");

                    b.Property<string>("TicketCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ticket_code");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__Ticket__3213E83FBF00AE8F");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "BookingSeatId" }, "UQ__Ticket__C073D47C7F315E70")
                        .IsUnique();

                    b.ToTable("Ticket", (string)null);
                });

            modelBuilder.Entity("CineBox.Services.Database.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("passwordHash");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("passwordSalt");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("phone");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("surname");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("PK__User__3213E83F430A5CF0");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("CineBox.Services.Database.UsersRole", b =>
                {
                    b.Property<int>("UsersRolesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsersRolesId"));

                    b.Property<DateTime>("DateOfModification")
                        .HasColumnType("datetime")
                        .HasColumnName("dateOfModification");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("UsersRolesId")
                        .HasName("PK__UsersRol__A9752347C3F9B8FD");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersRoles");
                });

            modelBuilder.Entity("CineBox.Services.Database.Booking", b =>
                {
                    b.HasOne("CineBox.Services.Database.Promotion", "Promotion")
                        .WithMany("Bookings")
                        .HasForeignKey("PromotionId")
                        .IsRequired()
                        .HasConstraintName("FK_Booking_Promotion");

                    b.HasOne("CineBox.Services.Database.Screening", "Screening")
                        .WithMany("Bookings")
                        .HasForeignKey("ScreeningId")
                        .IsRequired()
                        .HasConstraintName("FK__Booking__screeni__4D94879B");

                    b.HasOne("CineBox.Services.Database.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Booking__user_id__4CA06362");

                    b.Navigation("Promotion");

                    b.Navigation("Screening");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CineBox.Services.Database.BookingSeat", b =>
                {
                    b.HasOne("CineBox.Services.Database.Booking", "Booking")
                        .WithMany("BookingSeats")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__BookingSe__booki__6477ECF3");

                    b.HasOne("CineBox.Services.Database.Seat", "Seat")
                        .WithMany("BookingSeats")
                        .HasForeignKey("SeatId")
                        .IsRequired()
                        .HasConstraintName("FK__BookingSe__seat___656C112C");

                    b.Navigation("Booking");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("CineBox.Services.Database.Hall", b =>
                {
                    b.HasOne("CineBox.Services.Database.Cinema", "Cinema")
                        .WithMany("Halls")
                        .HasForeignKey("CinemaId")
                        .IsRequired()
                        .HasConstraintName("FK__Hall__cinema_id__45F365D3");

                    b.Navigation("Cinema");
                });

            modelBuilder.Entity("CineBox.Services.Database.Movie", b =>
                {
                    b.HasOne("CineBox.Services.Database.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("FK__Movie__genre_id__412EB0B6");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("CineBox.Services.Database.MovieActor", b =>
                {
                    b.HasOne("CineBox.Services.Database.Actor", "Actor")
                        .WithMany("MovieActors")
                        .HasForeignKey("ActorId")
                        .IsRequired()
                        .HasConstraintName("FK__MovieActo__actor__5CD6CB2B");

                    b.HasOne("CineBox.Services.Database.Movie", "Movie")
                        .WithMany("MovieActors")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK__MovieActo__movie__5BE2A6F2");

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("CineBox.Services.Database.News", b =>
                {
                    b.HasOne("CineBox.Services.Database.Cinema", "Cinema")
                        .WithMany("News")
                        .HasForeignKey("CinemaId")
                        .IsRequired()
                        .HasConstraintName("FK__News__cinema_id__02FC7413");

                    b.Navigation("Cinema");
                });

            modelBuilder.Entity("CineBox.Services.Database.Payment", b =>
                {
                    b.HasOne("CineBox.Services.Database.Booking", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__Payment__booking__534D60F1");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("CineBox.Services.Database.Review", b =>
                {
                    b.HasOne("CineBox.Services.Database.Movie", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK__Review__movie_id__571DF1D5");

                    b.HasOne("CineBox.Services.Database.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Review__user_id__5629CD9C");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CineBox.Services.Database.Screening", b =>
                {
                    b.HasOne("CineBox.Services.Database.Hall", "Hall")
                        .WithMany("Screenings")
                        .HasForeignKey("HallId")
                        .IsRequired()
                        .HasConstraintName("FK__Screening__hall___49C3F6B7");

                    b.HasOne("CineBox.Services.Database.Movie", "Movie")
                        .WithMany("Screenings")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK__Screening__movie__48CFD27E");

                    b.Navigation("Hall");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("CineBox.Services.Database.Seat", b =>
                {
                    b.HasOne("CineBox.Services.Database.Hall", "Hall")
                        .WithMany("Seats")
                        .HasForeignKey("HallId")
                        .IsRequired()
                        .HasConstraintName("FK__Seat__status__5FB337D6");

                    b.Navigation("Hall");
                });

            modelBuilder.Entity("CineBox.Services.Database.Ticket", b =>
                {
                    b.HasOne("CineBox.Services.Database.BookingSeat", "BookingSeat")
                        .WithOne("Ticket")
                        .HasForeignKey("CineBox.Services.Database.Ticket", "BookingSeatId")
                        .IsRequired()
                        .HasConstraintName("FK_Ticket_BookingSeat");

                    b.HasOne("CineBox.Services.Database.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Ticket_User");

                    b.Navigation("BookingSeat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CineBox.Services.Database.UsersRole", b =>
                {
                    b.HasOne("CineBox.Services.Database.Role", "Role")
                        .WithMany("UsersRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__UsersRole__role___3E52440B");

                    b.HasOne("CineBox.Services.Database.User", "User")
                        .WithMany("UsersRoles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__UsersRole__user___3D5E1FD2");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CineBox.Services.Database.Actor", b =>
                {
                    b.Navigation("MovieActors");
                });

            modelBuilder.Entity("CineBox.Services.Database.Booking", b =>
                {
                    b.Navigation("BookingSeats");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("CineBox.Services.Database.BookingSeat", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("CineBox.Services.Database.Cinema", b =>
                {
                    b.Navigation("Halls");

                    b.Navigation("News");
                });

            modelBuilder.Entity("CineBox.Services.Database.Genre", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("CineBox.Services.Database.Hall", b =>
                {
                    b.Navigation("Screenings");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("CineBox.Services.Database.Movie", b =>
                {
                    b.Navigation("MovieActors");

                    b.Navigation("Reviews");

                    b.Navigation("Screenings");
                });

            modelBuilder.Entity("CineBox.Services.Database.Promotion", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("CineBox.Services.Database.Role", b =>
                {
                    b.Navigation("UsersRoles");
                });

            modelBuilder.Entity("CineBox.Services.Database.Screening", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("CineBox.Services.Database.Seat", b =>
                {
                    b.Navigation("BookingSeats");
                });

            modelBuilder.Entity("CineBox.Services.Database.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Reviews");

                    b.Navigation("Tickets");

                    b.Navigation("UsersRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
